; Generated by c86 (BYU-NASM) 5.1 (beta) from myinth.i
	CPU	8086
	ALIGN	2
	jmp	main	; Jump to program start
	ALIGN	2
L_myinth_1:
	DW	0
	ALIGN	2
vReset:
	; >>>>> Line:	6
	; >>>>> { 
	jmp	L_myinth_2
L_myinth_3:
	; >>>>> Line:	7
	; >>>>> exit(0); 
	xor	al, al
	push	ax
	call	exit
	add	sp, 2
	mov	sp, bp
	pop	bp
	ret
L_myinth_2:
	push	bp
	mov	bp, sp
	jmp	L_myinth_3
L_myinth_6:
	DB	0xA,0
L_myinth_5:
	DB	0xA,"TICK ",0
	ALIGN	2
vTick:
	; >>>>> Line:	11
	; >>>>> { 
	jmp	L_myinth_7
L_myinth_8:
	; >>>>> Line:	13
	; >>>>> printString("\nTICK "); 
	mov	ax, L_myinth_5
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	14
	; >>>>> printUInt(++tick); 
	mov	ax, word [L_myinth_1]
	inc	ax
	mov	word [L_myinth_1], ax
	push	ax
	call	printUInt
	add	sp, 2
	; >>>>> Line:	15
	; >>>>> printString("\n"); 
	mov	ax, L_myinth_6
	push	ax
	call	printString
	add	sp, 2
	mov	sp, bp
	pop	bp
	ret
L_myinth_7:
	push	bp
	mov	bp, sp
	jmp	L_myinth_8
L_myinth_13:
	DB	") IGNORED",0xA,0
L_myinth_12:
	DB	0xA,"KEYPRESS (",0
L_myinth_11:
	DB	0xA,"DELAY COMPLETE",0xA,0
L_myinth_10:
	DB	0xA,"DELAY KEY PRESSED",0xA,0
	ALIGN	2
vKeyboard:
	; >>>>> Line:	19
	; >>>>> { 
	jmp	L_myinth_14
L_myinth_15:
	; >>>>> Line:	21
	; >>>>> if((char)KeyBuffer == 'd'){ 
	cmp	byte [KeyBuffer], 100
	jne	L_myinth_16
	; >>>>> Line:	22
	; >>>>> printString("\nDELAY KEY PRESSED\n"); 
	mov	ax, L_myinth_10
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	23
	; >>>>> loop_tick = 0; 
	mov	word [bp-2], 0
	; >>>>> Line:	24
	; >>>>> while(loop_tick < 5000){ 
	jmp	L_myinth_18
L_myinth_17:
	; >>>>> Line:	25
	; >>>>> ++loop_tick; 
	inc	word [bp-2]
L_myinth_18:
	cmp	word [bp-2], 5000
	jl	L_myinth_17
L_myinth_19:
	; >>>>> Line:	28
	; >>>>> printString("\nDELAY COMPLETE\n"); 
	mov	ax, L_myinth_11
	push	ax
	call	printString
	add	sp, 2
	jmp	L_myinth_20
L_myinth_16:
	; >>>>> Line:	31
	; >>>>> printString("\nKEYPRESS ("); 
	mov	ax, L_myinth_12
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	32
	; >>>>> printChar((char)KeyBuffer); 
	push	word [KeyBuffer]
	call	printChar
	add	sp, 2
	; >>>>> Line:	33
	; >>>>> printString(") IGNORED\n") 
	mov	ax, L_myinth_13
	push	ax
	call	printString
	add	sp, 2
L_myinth_20:
	mov	sp, bp
	pop	bp
	ret
L_myinth_14:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_myinth_15
